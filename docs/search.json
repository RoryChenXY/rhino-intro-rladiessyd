[
  {
    "objectID": "slides/intro-to-rhino.html#introduction-to-building-shiny-apps-with-rhino",
    "href": "slides/intro-to-rhino.html#introduction-to-building-shiny-apps-with-rhino",
    "title": "",
    "section": "Introduction to building shiny apps with {rhino}",
    "text": "Introduction to building shiny apps with {rhino}"
  },
  {
    "objectID": "slides/intro-to-rhino.html#welcome",
    "href": "slides/intro-to-rhino.html#welcome",
    "title": "",
    "section": "Welcome!",
    "text": "Welcome!\n\n\nMs. Rory Chen\nManager of Dementias Platform Australia (DPAU)\nCentre for Healthy Brain Ageing (CHeBA)\nDiscipline of Psychiatry & Mental Health\nSchool of Clinical Medicine, UNSW Medicine & Health\n\nDPAU: https://www.dementiasplatform.com.au\nLinkedIn: https://www.linkedin.com/in/rorychenxy"
  },
  {
    "objectID": "slides/intro-to-rhino.html#pre-requisites",
    "href": "slides/intro-to-rhino.html#pre-requisites",
    "title": "",
    "section": "Pre-requisites",
    "text": "Pre-requisites\n\nComfortable with simple operations in R and R Studio\nNo prior knowledge of Shiny apps required.\nInstall the {shiny} and {rhino} package if you haven’t already\n\ninstall.packages(\"shiny\") \ninstall.packages(\"rhino\")"
  },
  {
    "objectID": "slides/intro-to-rhino.html#todays-topic",
    "href": "slides/intro-to-rhino.html#todays-topic",
    "title": "",
    "section": "Today’s topic",
    "text": "Today’s topic\n\n\nThe workshop will run for 1 hour (recorded).\n\nWhat is Rhino?\nReal-world R Shiny App Demo to inspire your own\nSlides + Coding Example + Exercise\nAsk questions!\n\n\n\nRhino Stickerfrom Rhino Stickers"
  },
  {
    "objectID": "slides/intro-to-rhino.html#what-is-shiny",
    "href": "slides/intro-to-rhino.html#what-is-shiny",
    "title": "",
    "section": "What is Shiny?",
    "text": "What is Shiny?\n\n\n\n\n✨Shiny is a framework for creating interactive web applications using R code.\n\nUI (User Interface): How your app looks\n\nServer: How your app works\n\nReactivity: User changes input controls → updates output (via server function)\nhttps://rorychenxy.github.io/shiny-workshops/slides/intro-to-shiny.html"
  },
  {
    "objectID": "slides/intro-to-rhino.html#what-is-rhino",
    "href": "slides/intro-to-rhino.html#what-is-rhino",
    "title": "",
    "section": "What is Rhino?",
    "text": "What is Rhino?\n\n\n\n\n🦏Rhino is an Enterprise-grade framework for building Shiny applications\n\nDeveloped by Appsilon https://appsilon.github.io/rhino/\nOpinionated framework with proven industry experience\nModern software engineering practices"
  },
  {
    "objectID": "slides/intro-to-rhino.html#why-rhino",
    "href": "slides/intro-to-rhino.html#why-rhino",
    "title": "",
    "section": "Why Rhino?",
    "text": "Why Rhino?\n\n\n\nClear Code (modules, file structures)\nQuality Check\nAutomation\nWe will see details later 😎.\n\n\n\nWhy Why Why GIFfrom Why Why GIFs"
  },
  {
    "objectID": "slides/intro-to-rhino.html#dementias-platform-australia-dpau",
    "href": "slides/intro-to-rhino.html#dementias-platform-australia-dpau",
    "title": "",
    "section": "Dementias Platform Australia (DPAU)",
    "text": "Dementias Platform Australia (DPAU)\n\n\n\nLed: UNSW Sydney’s Centre for Healthy Brain Ageing (CHeBA)\nPartnership:\n\nDementias Platform UK (DPUK)\nAlzheimers Diseases Data Initiative (AD Data Initiative)\n\nFunding support:\n\nNational Institute of Health (NIH)\nAustralian Research Data Commons (ARDC)"
  },
  {
    "objectID": "slides/intro-to-rhino.html#real-world-r-shiny-app-demo---gladse",
    "href": "slides/intro-to-rhino.html#real-world-r-shiny-app-demo---gladse",
    "title": "",
    "section": "Real-world R Shiny App Demo - GLADSE",
    "text": "Real-world R Shiny App Demo - GLADSE\n\n\nAccelerate the progress in dementia research\nTransform the epidemiology of ageing and dementia\nGlobal Ageing and Dementia Study Explorer (GLADSE) https://portal.dementiasplatform.com.au/crs-metadata-explorer"
  },
  {
    "objectID": "slides/intro-to-rhino.html#gladse-file-structure",
    "href": "slides/intro-to-rhino.html#gladse-file-structure",
    "title": "",
    "section": "GLADSE File Structure",
    "text": "GLADSE File Structure\n\nfs::dir_tree(\"./github/gladse\", recurse = 2)\n\n\n\n~/gladse\n├── app\n│   ├── data\n│   │   ├── crsdir_df.fst\n│   │   ├── crslist.fst\n│   │   ├── csurvone_df.fst\n│   │   ├── csurv_filter.fst\n│   │   ├── csurv_matrix.fst\n│   │   ├── filter_df.fst\n│   │   ├── map_filter.rda\n│   │   ├── measurement_inv.fst\n│   │   ├── meta_filter.fst\n│   │   ├── repolist.fst\n│   │   └── varinfo.fst\n│   ├── js\n│   │   └── index.js\n│   ├── logic\n│   │   ├── footer.R\n│   │   ├── value_map.R\n│   │   ├── vlabel.R\n│   │   └── __init__.R\n│   ├── main.R\n│   ├── static\n│   │   ├── favicon.ico\n│   │   └── images\n│   ├── styles\n│   │   └── main.scss\n│   └── view\n│       ├── connect_map.R\n│       ├── crs_directory.R\n│       ├── crs_filters.R\n│       ├── csurv_matrix.R\n│       ├── dt_table.R\n│       ├── map_filter.R\n│       ├── repo.R\n│       ├── stmt.R\n│       └── __init__.R\n├── app.R\n├── config.yml\n├── dependencies.R\n├── gladse.Rproj\n├── renv\n│   ├── activate.R\n│   ├── library\n│   │   └── windows\n│   ├── settings.json\n│   └── staging\n├── renv.lock\n├── rhino.yml\n├── rsconnect\n│   └── shinyapps.io\n│       ├── dpau\n└── tests\n    ├── cypress\n    │   └── e2e\n    ├── cypress.config.js\n    └── testthat\n        └── test-main.R\n\nClear Code - Organized File Structure\n\napp/main.R - Application entry point\napp/logic/ - Business logic (Shiny-independent)\napp/view/ - UI components and modules\napp/static/ - static like pics\napp/styles/ - CSS files"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-1-initiate-step-1",
    "href": "slides/intro-to-rhino.html#exercise-1-initiate-step-1",
    "title": "",
    "section": "Exercise 1 – initiate [Step 1]",
    "text": "Exercise 1 – initiate [Step 1]\nCreate your rhino app with the New Project feature with R studio."
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-1---setup-step-2",
    "href": "slides/intro-to-rhino.html#exercise-1---setup-step-2",
    "title": "",
    "section": "Exercise 1 - Setup [Step 2]",
    "text": "Exercise 1 - Setup [Step 2]\n\n\n\nOr Start your Rhino with rhino::init(\"first-rhino-app\")\nEnable automatic reloading with shiny::devmode().\nRun the app with shiny::runApp().\nCheck your project directory"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-1---hello-world-step-3",
    "href": "slides/intro-to-rhino.html#exercise-1---hello-world-step-3",
    "title": "",
    "section": "Exercise 1 - Hello, World! [Step 3]",
    "text": "Exercise 1 - Hello, World! [Step 3]\n\nEdit the displayed message in app/main.R\n\n\nbox::use(\n  shiny[bootstrapPage, div, moduleServer, NS, renderUI, tags, uiOutput],\n)\n\n#' @export\nui &lt;- function(id) {\n  ns &lt;- NS(id)\n  bootstrapPage(\n    uiOutput(ns(\"message\"))\n  )\n}\n\n#' @export\nserver &lt;- function(id) {\n  moduleServer(id, function(input, output, session) {\n    output$message &lt;- renderUI({\n      div(\n        style = \"display: flex; justify-content: center; align-items: center; height: 100vh;\",\n        tags$h1(\n           tags$a(\"Hello, World! Check out Rhino docs!\", \n                  href = \"https://appsilon.github.io/rhino/\")\n        )\n      )\n    })\n  })\n}"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-1---ns---nsid-step-3.5",
    "href": "slides/intro-to-rhino.html#exercise-1---ns---nsid-step-3.5",
    "title": "",
    "section": "Exercise 1 - ns <- NS(id) [Step 3.5]",
    "text": "Exercise 1 - ns &lt;- NS(id) [Step 3.5]\n\nbox::use(\n  shiny[bootstrapPage, div, moduleServer, NS, renderUI, tags, uiOutput],\n)\n\n#' @export\nui &lt;- function(id) {\n  ns &lt;- NS(id)\n  bootstrapPage(uiOutput(ns(\"message\")))\n}\n\n\nNS(id) is used in Shiny modules to create a namespace function that helps\ngenerate unique, namespaced IDs for inputs and outputs within the module.\nUnder rhino framework, in the UI, the ID must be wrapped in ns(), but in the server the namespace is applied automatically.\nLearn more in Modularizing Shiny app code"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-1---hellostep-4",
    "href": "slides/intro-to-rhino.html#exercise-1---hellostep-4",
    "title": "",
    "section": "Exercise 1 - Hello[Step 4]",
    "text": "Exercise 1 - Hello[Step 4]\n\n\n\n\n\n\nTry shiny::runExample (\"01_hello\")\nWe will convert a traditional shiny app into a modular Rhino app script\nCheck the traditional shiny app script: 01_hello.R\nComplete the modular Rhino app script: 01_hello_rhino.R\nCopy the syntax and create your /app/view/hist.R"
  },
  {
    "objectID": "slides/intro-to-rhino.html#why-rhino---clear-code",
    "href": "slides/intro-to-rhino.html#why-rhino---clear-code",
    "title": "",
    "section": "Why Rhino? - Clear Code",
    "text": "Why Rhino? - Clear Code\nScalable App Architecture\n\nModularization with {box} package\nShiny modules as building blocks\nLogic and view separation"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-2---view-step-1",
    "href": "slides/intro-to-rhino.html#exercise-2---view-step-1",
    "title": "",
    "section": "Exercise 2 - View [Step 1]",
    "text": "Exercise 2 - View [Step 1]\n\n\n\nCall the ‘hist.R’ from your main.R with the following syntax\n\n\nbox::use(\n  shiny\n)\n\nbox::use(\n  app/view/hist\n)\n\n#' @export\nui &lt;- function(id) {\n  ns &lt;- shiny$NS(id)\n  \n  shiny$fluidPage(\n    hist$ui(ns('mod1'))\n  )\n  \n}\n\n#' @export\nserver &lt;- function(id) {\n  shiny$moduleServer(id, function(input, output, session) {\n    \n    hist$server(\"mod1\")\n    \n  })\n}"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-2---view-step-2",
    "href": "slides/intro-to-rhino.html#exercise-2---view-step-2",
    "title": "",
    "section": "Exercise 2 - View [Step 2]",
    "text": "Exercise 2 - View [Step 2]\n\n\n\nCopy the syntax: 02_hello_mod.R\nCreate and update your /app/view/hello.R\nCall the ‘hello.R’ from your main.R\nSee the app\n\n\n# app/view/hello.R\n\nbox::use(\n  shiny,\n)\n\n#' @export\nui &lt;- function(id) {\n  ns &lt;- shiny$NS(id)\n  shiny$div(\n    shiny$h1(\"Hello, World!\"),\n    \n    ## update the inputID with ns()\n    shiny$textInput(inputId = ?, \n                    label = \"Your Name\",\n                    value = '',\n                    placeholder = NULL),\n    \n    \n    ## update the outputId with ns()\n    shiny$textOutput(outputId = ?)\n  )\n}\n\n#' @export\nserver &lt;- function(id) {\n  shiny$moduleServer(id, function(input, output, session) {\n    # inputID & # outputId\n    \n    output$______ &lt;- shiny::renderText({\n      paste('Hello, ', input$_____, \"!\", sep = '')\n    })\n  })\n}"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-3---reverse-the-word---logicstep1",
    "href": "slides/intro-to-rhino.html#exercise-3---reverse-the-word---logicstep1",
    "title": "",
    "section": "Exercise 3 - Reverse the word! - Logic[Step1]",
    "text": "Exercise 3 - Reverse the word! - Logic[Step1]\n\n\n\nCopy the following syntax: 03_reverse_logic.R\nCreate your app/logic/reverse.R\n\n\n# app/logic/reverse.R\n\nbox::use(\n  stringi[stri_reverse]\n)\n\n#' @export\nreverse_words &lt;- function(text) {\n  stringi::stri_reverse(text)\n}"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-3---logic-and-view-step2",
    "href": "slides/intro-to-rhino.html#exercise-3---logic-and-view-step2",
    "title": "",
    "section": "Exercise 3 - Logic and View [Step2]",
    "text": "Exercise 3 - Logic and View [Step2]\n\n\n\nRefer to 03_reverse.R\nUpdate your app/view/hello.R\n\ncall the function at beginning\n\n\nbox::use(\n  app/logic/reverse[reverse_words]\n)\n\n\nAdd new output with reversed name in UI\nUpdate the Server"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-4---logic-and-view-and-static-step-1",
    "href": "slides/intro-to-rhino.html#exercise-4---logic-and-view-and-static-step-1",
    "title": "",
    "section": "Exercise 4 - Logic and View and Static [Step 1]",
    "text": "Exercise 4 - Logic and View and Static [Step 1]\n\n\n\nDownload the img folder into your app/static folder\nRefer to 04_const.R, create your app/logic/const.R\nRefer to 04_favorites.R, complete the script and create your app/view/favorites.R"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-4---logic-and-view-and-static-step-2",
    "href": "slides/intro-to-rhino.html#exercise-4---logic-and-view-and-static-step-2",
    "title": "",
    "section": "Exercise 4 - Logic and View and Static [Step 2]",
    "text": "Exercise 4 - Logic and View and Static [Step 2]\n\n\n\nUpdate your main.R to call the ‘favorite’ module\n\nbox::use(\n # Call the const we defined\n)\n\n# Call the favorite module with different options\n\n## UI\nfavorites$ui(ns(\"fruits\"), category = \"fruits\", choices = const$fruits),\nfavorites$ui(ns(\"vege\"), category = \"vegetables\", choices = const$vegetables),\n\n## Server\nfavorites$server(\"fruits\")\nfavorites$server(\"vege\")"
  },
  {
    "objectID": "slides/intro-to-rhino.html#quality",
    "href": "slides/intro-to-rhino.html#quality",
    "title": "",
    "section": "2. Quality ✅",
    "text": "2. Quality ✅\n\nUnit Testing with {testthat}\nEnd-to-End Testing with Cypress https://appsilon.github.io/rhino/articles/tutorial/write-end-to-end-tests-with-cypress.html\nCode Linting for consistency\nLogging and Monitoring capabilities\nType Safety with {box} modules"
  },
  {
    "objectID": "slides/intro-to-rhino.html#automation",
    "href": "slides/intro-to-rhino.html#automation",
    "title": "",
    "section": "3. Automation",
    "text": "3. Automation\n\nProject Initialization - rhino::init()\nCI/CD with GitHub Actions - Built-in workflows\nDependency Management with {renv}\nConfiguration Management with {config}"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-5---map-filter",
    "href": "slides/intro-to-rhino.html#exercise-5---map-filter",
    "title": "",
    "section": "Exercise 5 - Map filter!",
    "text": "Exercise 5 - Map filter!\nRefer to this map filter app 05_mapfilter.R\n\n# Packages -----\nlibrary(shiny)\nlibrary(leaflet)\nlibrary(spData)\nlibrary(dplyr)\nlibrary(sf)\n\n# Prepare Data -----\ndata(world)\nmapdata &lt;- world |&gt; mutate(country = name_long)\n\n# UI -----\nui &lt;- function(id) {\n  shiny::fluidPage(\n    shiny::wellPanel(shiny::actionButton(\"resetmap\", \"Reset Map\")),\n    leaflet::leafletOutput(\"mapfilter\", height = 400),\n    shiny::tags$h4(\"Selected countries:\"),\n    shiny::verbatimTextOutput(\"filtered_country\")\n  )\n}\n\n# Server -----\nserver &lt;- function(input, output, session) {\n    \n    # Define reactive values\n    rv &lt;- shiny::reactiveValues(selected_countries = NULL, # Initialize reactive value for selected counties\n                                last_click_id = NULL,\n                                filtered_data = mapdata) \n    \n    \n    shiny::observeEvent(input$mapfilter_shape_click, { # this is the logic behind the \"click\" of the map.\n      \n      click &lt;- input$mapfilter_shape_click\n      rv$last_click_id &lt;- click$id \n      ########## map behavior ################\n      \n      # If a country is clicked\n      if (click$id %in% rv$selected_countries) {\n        # If selected, remove it\n        rv$selected_countries &lt;- rv$selected_countries[rv$selected_countries != click$id]\n        \n      } else if(click$id == \"selected\"){ # when a county is clicked again it is removed\n        \n        rv$selected_countries &lt;- rv$selected_countries[rv$selected_countries != tail(rv$selected_countries, n = 1)]\n        \n      }else {\n        # If not selected, add it\n        rv$selected_countries &lt;- c(rv$selected_countries, click$id)\n      }\n      \n      # Now update the leaflet\n      leaflet::leafletProxy(\"mapfilter\", session) |&gt;\n        leaflet::addPolygons(data = mapdata,\n                             layerId = ~country,\n                             label = ~country,\n                             fillColor = ifelse(mapdata$country %in% rv$selected_countries, \"#F47A60\", \"#7fe7dc\"), # Change fill color based on selection\n                             col = \"#316879\",\n                             weight = 2,\n                             fillOpacity = ifelse(mapdata$country %in% rv$selected_countries, 1, 0.5),\n                             highlight = highlightOptions(\n                               fillOpacity = 1,\n                               bringToFront = TRUE)\n        )\n      \n    })\n    \n    output$filtered_country &lt;- shiny::renderPrint({\n      paste(rv$selected_countries, collapse = ',')\n    })\n    \n    # Leaflet\n    output$mapfilter &lt;- leaflet::renderLeaflet({ # rendering the filter map\n      \n      leaflet::leaflet() |&gt; \n        leaflet::addTiles() |&gt; # The is the base map\n        leaflet::addPolygons(data = mapdata, \n                             color = '#316879', \n                             weight = 1,\n                             layerId = ~country,\n                             label = ~country,\n                             fillColor = \"#7fe7dc\",\n                             fillOpacity = .5,\n                             highlight = highlightOptions(\n                               fillOpacity = 1,\n                               bringToFront = TRUE\n                             )) |&gt;\n        leaflet::setView(zoom = 1, lng = 0, lat =50)\n      \n    })\n    \n    # Reset the map filter\n    shiny::observeEvent(input$resetmap, {\n      \n      rv$selected_countries &lt;- NULL\n      rv$last_click_id &lt;- NULL\n      rv$filtered_data &lt;- mapdata\n      \n      leafletProxy(\"mapfilter\", session) |&gt;\n        leaflet::addPolygons(data = mapdata, \n                             color = '#316879', \n                             weight = 1,\n                             layerId = ~country,\n                             label = ~country,\n                             fillColor = \"#7fe7dc\",\n                             fillOpacity = .5,\n                             highlight = highlightOptions(\n                               fillOpacity = 1,\n                               bringToFront = TRUE\n                             )) |&gt;\n        leaflet::setView(zoom = 1, lng = 0, lat =50)\n      \n    })\n    \n\n    # Return reactive values\n    return(\n      list(\n        value = shiny::reactive(rv$selected_countries),\n        filtered  = shiny::reactive(rv$filtered_data)\n      )\n    )\n   \n}   \n\n\n# Run the app -----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "slides/intro-to-rhino.html#exercise-5---map-filter-to-module",
    "href": "slides/intro-to-rhino.html#exercise-5---map-filter-to-module",
    "title": "",
    "section": "Exercise 5 - Map filter to module",
    "text": "Exercise 5 - Map filter to module\nCan you convert it into a module?"
  },
  {
    "objectID": "slides/intro-to-rhino.html#thank-you-questions",
    "href": "slides/intro-to-rhino.html#thank-you-questions",
    "title": "",
    "section": "Thank you & Questions?",
    "text": "Thank you & Questions?"
  }
]